//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPADB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GPADBEntities1 : DbContext
    {
        public GPADBEntities1()
            : base("name=GPADBEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<vwGeneralPropertyInformation> vwGeneralPropertyInformations { get; set; }
        public virtual DbSet<vwGeneralLeadInformation> vwGeneralLeadInformations { get; set; }
        public virtual DbSet<SavedScenario> SavedScenarios { get; set; }
    
        public virtual int GetPropertyLeads(string zipCodes, string buildingClassCodes, string counties, string vacant, string mailingAddressActive, string violations, string cities, string neighborhoods, string states, string lienTypes, string leadGrades, string lTV, string equity, string hasFannie, string hasFreddie, string unbuiltArea, string servicer, string landmark, string hasFHA, string deedAge, string taxLiensSoldYear, string taxLiensSoldTotal, string ownerLivingAge, string mortgageExistingAge)
        {
            var zipCodesParameter = zipCodes != null ?
                new ObjectParameter("ZipCodes", zipCodes) :
                new ObjectParameter("ZipCodes", typeof(string));
    
            var buildingClassCodesParameter = buildingClassCodes != null ?
                new ObjectParameter("BuildingClassCodes", buildingClassCodes) :
                new ObjectParameter("BuildingClassCodes", typeof(string));
    
            var countiesParameter = counties != null ?
                new ObjectParameter("Counties", counties) :
                new ObjectParameter("Counties", typeof(string));
    
            var vacantParameter = vacant != null ?
                new ObjectParameter("Vacant", vacant) :
                new ObjectParameter("Vacant", typeof(string));
    
            var mailingAddressActiveParameter = mailingAddressActive != null ?
                new ObjectParameter("MailingAddressActive", mailingAddressActive) :
                new ObjectParameter("MailingAddressActive", typeof(string));
    
            var violationsParameter = violations != null ?
                new ObjectParameter("Violations", violations) :
                new ObjectParameter("Violations", typeof(string));
    
            var citiesParameter = cities != null ?
                new ObjectParameter("Cities", cities) :
                new ObjectParameter("Cities", typeof(string));
    
            var neighborhoodsParameter = neighborhoods != null ?
                new ObjectParameter("Neighborhoods", neighborhoods) :
                new ObjectParameter("Neighborhoods", typeof(string));
    
            var statesParameter = states != null ?
                new ObjectParameter("States", states) :
                new ObjectParameter("States", typeof(string));
    
            var lienTypesParameter = lienTypes != null ?
                new ObjectParameter("LienTypes", lienTypes) :
                new ObjectParameter("LienTypes", typeof(string));
    
            var leadGradesParameter = leadGrades != null ?
                new ObjectParameter("LeadGrades", leadGrades) :
                new ObjectParameter("LeadGrades", typeof(string));
    
            var lTVParameter = lTV != null ?
                new ObjectParameter("LTV", lTV) :
                new ObjectParameter("LTV", typeof(string));
    
            var equityParameter = equity != null ?
                new ObjectParameter("Equity", equity) :
                new ObjectParameter("Equity", typeof(string));
    
            var hasFannieParameter = hasFannie != null ?
                new ObjectParameter("HasFannie", hasFannie) :
                new ObjectParameter("HasFannie", typeof(string));
    
            var hasFreddieParameter = hasFreddie != null ?
                new ObjectParameter("HasFreddie", hasFreddie) :
                new ObjectParameter("HasFreddie", typeof(string));
    
            var unbuiltAreaParameter = unbuiltArea != null ?
                new ObjectParameter("UnbuiltArea", unbuiltArea) :
                new ObjectParameter("UnbuiltArea", typeof(string));
    
            var servicerParameter = servicer != null ?
                new ObjectParameter("Servicer", servicer) :
                new ObjectParameter("Servicer", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var hasFHAParameter = hasFHA != null ?
                new ObjectParameter("HasFHA", hasFHA) :
                new ObjectParameter("HasFHA", typeof(string));
    
            var deedAgeParameter = deedAge != null ?
                new ObjectParameter("DeedAge", deedAge) :
                new ObjectParameter("DeedAge", typeof(string));
    
            var taxLiensSoldYearParameter = taxLiensSoldYear != null ?
                new ObjectParameter("TaxLiensSoldYear", taxLiensSoldYear) :
                new ObjectParameter("TaxLiensSoldYear", typeof(string));
    
            var taxLiensSoldTotalParameter = taxLiensSoldTotal != null ?
                new ObjectParameter("TaxLiensSoldTotal", taxLiensSoldTotal) :
                new ObjectParameter("TaxLiensSoldTotal", typeof(string));
    
            var ownerLivingAgeParameter = ownerLivingAge != null ?
                new ObjectParameter("OwnerLivingAge", ownerLivingAge) :
                new ObjectParameter("OwnerLivingAge", typeof(string));
    
            var mortgageExistingAgeParameter = mortgageExistingAge != null ?
                new ObjectParameter("MortgageExistingAge", mortgageExistingAge) :
                new ObjectParameter("MortgageExistingAge", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPropertyLeads", zipCodesParameter, buildingClassCodesParameter, countiesParameter, vacantParameter, mailingAddressActiveParameter, violationsParameter, citiesParameter, neighborhoodsParameter, statesParameter, lienTypesParameter, leadGradesParameter, lTVParameter, equityParameter, hasFannieParameter, hasFreddieParameter, unbuiltAreaParameter, servicerParameter, landmarkParameter, hasFHAParameter, deedAgeParameter, taxLiensSoldYearParameter, taxLiensSoldTotalParameter, ownerLivingAgeParameter, mortgageExistingAgeParameter);
        }
    
        public virtual ObjectResult<vwGeneralLeadInformation> GetLeads(string zipCodes, string buildingClassCodes, string counties, string vacant, string mailingAddressActive, string violations, string cities, string neighborhoods, string states, string lienTypes, string leadGrades, string lTV, string equity, string hasFannie, string hasFreddie, string unbuiltArea, string servicer, string landmark, string hasFHA, string deedAge, string taxLiensSoldYear, string taxLiensSoldTotal, string ownerLivingAge, string mortgageExistingAge)
        {
            var zipCodesParameter = zipCodes != null ?
                new ObjectParameter("ZipCodes", zipCodes) :
                new ObjectParameter("ZipCodes", typeof(string));
    
            var buildingClassCodesParameter = buildingClassCodes != null ?
                new ObjectParameter("BuildingClassCodes", buildingClassCodes) :
                new ObjectParameter("BuildingClassCodes", typeof(string));
    
            var countiesParameter = counties != null ?
                new ObjectParameter("Counties", counties) :
                new ObjectParameter("Counties", typeof(string));
    
            var vacantParameter = vacant != null ?
                new ObjectParameter("Vacant", vacant) :
                new ObjectParameter("Vacant", typeof(string));
    
            var mailingAddressActiveParameter = mailingAddressActive != null ?
                new ObjectParameter("MailingAddressActive", mailingAddressActive) :
                new ObjectParameter("MailingAddressActive", typeof(string));
    
            var violationsParameter = violations != null ?
                new ObjectParameter("Violations", violations) :
                new ObjectParameter("Violations", typeof(string));
    
            var citiesParameter = cities != null ?
                new ObjectParameter("Cities", cities) :
                new ObjectParameter("Cities", typeof(string));
    
            var neighborhoodsParameter = neighborhoods != null ?
                new ObjectParameter("Neighborhoods", neighborhoods) :
                new ObjectParameter("Neighborhoods", typeof(string));
    
            var statesParameter = states != null ?
                new ObjectParameter("States", states) :
                new ObjectParameter("States", typeof(string));
    
            var lienTypesParameter = lienTypes != null ?
                new ObjectParameter("LienTypes", lienTypes) :
                new ObjectParameter("LienTypes", typeof(string));
    
            var leadGradesParameter = leadGrades != null ?
                new ObjectParameter("LeadGrades", leadGrades) :
                new ObjectParameter("LeadGrades", typeof(string));
    
            var lTVParameter = lTV != null ?
                new ObjectParameter("LTV", lTV) :
                new ObjectParameter("LTV", typeof(string));
    
            var equityParameter = equity != null ?
                new ObjectParameter("Equity", equity) :
                new ObjectParameter("Equity", typeof(string));
    
            var hasFannieParameter = hasFannie != null ?
                new ObjectParameter("HasFannie", hasFannie) :
                new ObjectParameter("HasFannie", typeof(string));
    
            var hasFreddieParameter = hasFreddie != null ?
                new ObjectParameter("HasFreddie", hasFreddie) :
                new ObjectParameter("HasFreddie", typeof(string));
    
            var unbuiltAreaParameter = unbuiltArea != null ?
                new ObjectParameter("UnbuiltArea", unbuiltArea) :
                new ObjectParameter("UnbuiltArea", typeof(string));
    
            var servicerParameter = servicer != null ?
                new ObjectParameter("Servicer", servicer) :
                new ObjectParameter("Servicer", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var hasFHAParameter = hasFHA != null ?
                new ObjectParameter("HasFHA", hasFHA) :
                new ObjectParameter("HasFHA", typeof(string));
    
            var deedAgeParameter = deedAge != null ?
                new ObjectParameter("DeedAge", deedAge) :
                new ObjectParameter("DeedAge", typeof(string));
    
            var taxLiensSoldYearParameter = taxLiensSoldYear != null ?
                new ObjectParameter("TaxLiensSoldYear", taxLiensSoldYear) :
                new ObjectParameter("TaxLiensSoldYear", typeof(string));
    
            var taxLiensSoldTotalParameter = taxLiensSoldTotal != null ?
                new ObjectParameter("TaxLiensSoldTotal", taxLiensSoldTotal) :
                new ObjectParameter("TaxLiensSoldTotal", typeof(string));
    
            var ownerLivingAgeParameter = ownerLivingAge != null ?
                new ObjectParameter("OwnerLivingAge", ownerLivingAge) :
                new ObjectParameter("OwnerLivingAge", typeof(string));
    
            var mortgageExistingAgeParameter = mortgageExistingAge != null ?
                new ObjectParameter("MortgageExistingAge", mortgageExistingAge) :
                new ObjectParameter("MortgageExistingAge", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vwGeneralLeadInformation>("GetLeads", zipCodesParameter, buildingClassCodesParameter, countiesParameter, vacantParameter, mailingAddressActiveParameter, violationsParameter, citiesParameter, neighborhoodsParameter, statesParameter, lienTypesParameter, leadGradesParameter, lTVParameter, equityParameter, hasFannieParameter, hasFreddieParameter, unbuiltAreaParameter, servicerParameter, landmarkParameter, hasFHAParameter, deedAgeParameter, taxLiensSoldYearParameter, taxLiensSoldTotalParameter, ownerLivingAgeParameter, mortgageExistingAgeParameter);
        }
    
        public virtual ObjectResult<vwGeneralLeadInformation> GetLeads(string zipCodes, string buildingClassCodes, string counties, string vacant, string mailingAddressActive, string violations, string cities, string neighborhoods, string states, string lienTypes, string leadGrades, string lTV, string equity, string hasFannie, string hasFreddie, string unbuiltArea, string servicer, string landmark, string hasFHA, string deedAge, string taxLiensSoldYear, string taxLiensSoldTotal, string ownerLivingAge, string mortgageExistingAge, MergeOption mergeOption)
        {
            var zipCodesParameter = zipCodes != null ?
                new ObjectParameter("ZipCodes", zipCodes) :
                new ObjectParameter("ZipCodes", typeof(string));
    
            var buildingClassCodesParameter = buildingClassCodes != null ?
                new ObjectParameter("BuildingClassCodes", buildingClassCodes) :
                new ObjectParameter("BuildingClassCodes", typeof(string));
    
            var countiesParameter = counties != null ?
                new ObjectParameter("Counties", counties) :
                new ObjectParameter("Counties", typeof(string));
    
            var vacantParameter = vacant != null ?
                new ObjectParameter("Vacant", vacant) :
                new ObjectParameter("Vacant", typeof(string));
    
            var mailingAddressActiveParameter = mailingAddressActive != null ?
                new ObjectParameter("MailingAddressActive", mailingAddressActive) :
                new ObjectParameter("MailingAddressActive", typeof(string));
    
            var violationsParameter = violations != null ?
                new ObjectParameter("Violations", violations) :
                new ObjectParameter("Violations", typeof(string));
    
            var citiesParameter = cities != null ?
                new ObjectParameter("Cities", cities) :
                new ObjectParameter("Cities", typeof(string));
    
            var neighborhoodsParameter = neighborhoods != null ?
                new ObjectParameter("Neighborhoods", neighborhoods) :
                new ObjectParameter("Neighborhoods", typeof(string));
    
            var statesParameter = states != null ?
                new ObjectParameter("States", states) :
                new ObjectParameter("States", typeof(string));
    
            var lienTypesParameter = lienTypes != null ?
                new ObjectParameter("LienTypes", lienTypes) :
                new ObjectParameter("LienTypes", typeof(string));
    
            var leadGradesParameter = leadGrades != null ?
                new ObjectParameter("LeadGrades", leadGrades) :
                new ObjectParameter("LeadGrades", typeof(string));
    
            var lTVParameter = lTV != null ?
                new ObjectParameter("LTV", lTV) :
                new ObjectParameter("LTV", typeof(string));
    
            var equityParameter = equity != null ?
                new ObjectParameter("Equity", equity) :
                new ObjectParameter("Equity", typeof(string));
    
            var hasFannieParameter = hasFannie != null ?
                new ObjectParameter("HasFannie", hasFannie) :
                new ObjectParameter("HasFannie", typeof(string));
    
            var hasFreddieParameter = hasFreddie != null ?
                new ObjectParameter("HasFreddie", hasFreddie) :
                new ObjectParameter("HasFreddie", typeof(string));
    
            var unbuiltAreaParameter = unbuiltArea != null ?
                new ObjectParameter("UnbuiltArea", unbuiltArea) :
                new ObjectParameter("UnbuiltArea", typeof(string));
    
            var servicerParameter = servicer != null ?
                new ObjectParameter("Servicer", servicer) :
                new ObjectParameter("Servicer", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var hasFHAParameter = hasFHA != null ?
                new ObjectParameter("HasFHA", hasFHA) :
                new ObjectParameter("HasFHA", typeof(string));
    
            var deedAgeParameter = deedAge != null ?
                new ObjectParameter("DeedAge", deedAge) :
                new ObjectParameter("DeedAge", typeof(string));
    
            var taxLiensSoldYearParameter = taxLiensSoldYear != null ?
                new ObjectParameter("TaxLiensSoldYear", taxLiensSoldYear) :
                new ObjectParameter("TaxLiensSoldYear", typeof(string));
    
            var taxLiensSoldTotalParameter = taxLiensSoldTotal != null ?
                new ObjectParameter("TaxLiensSoldTotal", taxLiensSoldTotal) :
                new ObjectParameter("TaxLiensSoldTotal", typeof(string));
    
            var ownerLivingAgeParameter = ownerLivingAge != null ?
                new ObjectParameter("OwnerLivingAge", ownerLivingAge) :
                new ObjectParameter("OwnerLivingAge", typeof(string));
    
            var mortgageExistingAgeParameter = mortgageExistingAge != null ?
                new ObjectParameter("MortgageExistingAge", mortgageExistingAge) :
                new ObjectParameter("MortgageExistingAge", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vwGeneralLeadInformation>("GetLeads", mergeOption, zipCodesParameter, buildingClassCodesParameter, countiesParameter, vacantParameter, mailingAddressActiveParameter, violationsParameter, citiesParameter, neighborhoodsParameter, statesParameter, lienTypesParameter, leadGradesParameter, lTVParameter, equityParameter, hasFannieParameter, hasFreddieParameter, unbuiltAreaParameter, servicerParameter, landmarkParameter, hasFHAParameter, deedAgeParameter, taxLiensSoldYearParameter, taxLiensSoldTotalParameter, ownerLivingAgeParameter, mortgageExistingAgeParameter);
        }
    }
}
